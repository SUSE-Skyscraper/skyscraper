// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createCloudAccountMetadata = `-- name: CreateCloudAccountMetadata :exec

insert into cloud_account_metadata (cloud, tenant_id, account_id, name, tags_current, tags_desired)
    VALUES ($1, $2, $3, $4, $5, $6)
    ON CONFLICT (cloud, tenant_id, account_id) DO UPDATE SET
        tags_current = $5,
        tags_desired = $6,
        name = $4,
        updated_at = now()
`

type CreateCloudAccountMetadataParams struct {
	Cloud       string
	TenantID    string
	AccountID   string
	Name        string
	TagsCurrent pgtype.JSONB
	TagsDesired pgtype.JSONB
}

//------------------------------------------------------------------------------------------------------------------
// Cloud Account Metadata
//------------------------------------------------------------------------------------------------------------------
func (q *Queries) CreateCloudAccountMetadata(ctx context.Context, arg CreateCloudAccountMetadataParams) error {
	_, err := q.db.Exec(ctx, createCloudAccountMetadata,
		arg.Cloud,
		arg.TenantID,
		arg.AccountID,
		arg.Name,
		arg.TagsCurrent,
		arg.TagsDesired,
	)
	return err
}

const createCloudTenant = `-- name: CreateCloudTenant :exec

insert into cloud_tenants (cloud, tenant_id, name)
values ($1, $2, $3)
on conflict (cloud, tenant_id) do update set name = $3, updated_at = now()
`

type CreateCloudTenantParams struct {
	Cloud    string
	TenantID string
	Name     string
}

//------------------------------------------------------------------------------------------------------------------
// Cloud Tenants
//------------------------------------------------------------------------------------------------------------------
func (q *Queries) CreateCloudTenant(ctx context.Context, arg CreateCloudTenantParams) error {
	_, err := q.db.Exec(ctx, createCloudTenant, arg.Cloud, arg.TenantID, arg.Name)
	return err
}

const getCloudAccountMetadata = `-- name: GetCloudAccountMetadata :one
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at from cloud_account_metadata
    where cloud = $1 and tenant_id = $2 and account_id = $3
`

type GetCloudAccountMetadataParams struct {
	Cloud     string
	TenantID  string
	AccountID string
}

func (q *Queries) GetCloudAccountMetadata(ctx context.Context, arg GetCloudAccountMetadataParams) (CloudAccountMetadatum, error) {
	row := q.db.QueryRow(ctx, getCloudAccountMetadata, arg.Cloud, arg.TenantID, arg.AccountID)
	var i CloudAccountMetadatum
	err := row.Scan(
		&i.Cloud,
		&i.TenantID,
		&i.AccountID,
		&i.Name,
		&i.Active,
		&i.TagsCurrent,
		&i.TagsDesired,
		&i.TagsDriftDetected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCloudAllAccountMetadata = `-- name: GetCloudAllAccountMetadata :many
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at from cloud_account_metadata
    order by cloud, tenant_id, account_id
`

func (q *Queries) GetCloudAllAccountMetadata(ctx context.Context) ([]CloudAccountMetadatum, error) {
	rows, err := q.db.Query(ctx, getCloudAllAccountMetadata)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudAccountMetadatum
	for rows.Next() {
		var i CloudAccountMetadatum
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.AccountID,
			&i.Name,
			&i.Active,
			&i.TagsCurrent,
			&i.TagsDesired,
			&i.TagsDriftDetected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudAllAccountMetadataForCloud = `-- name: GetCloudAllAccountMetadataForCloud :many
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at from cloud_account_metadata
    where cloud = $1
    order by tenant_id, account_id
`

func (q *Queries) GetCloudAllAccountMetadataForCloud(ctx context.Context, cloud string) ([]CloudAccountMetadatum, error) {
	rows, err := q.db.Query(ctx, getCloudAllAccountMetadataForCloud, cloud)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudAccountMetadatum
	for rows.Next() {
		var i CloudAccountMetadatum
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.AccountID,
			&i.Name,
			&i.Active,
			&i.TagsCurrent,
			&i.TagsDesired,
			&i.TagsDriftDetected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudAllAccountMetadataForCloudAndTenant = `-- name: GetCloudAllAccountMetadataForCloudAndTenant :many
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at from cloud_account_metadata
    where cloud = $1 and tenant_id = $2
    order by account_id
`

type GetCloudAllAccountMetadataForCloudAndTenantParams struct {
	Cloud    string
	TenantID string
}

func (q *Queries) GetCloudAllAccountMetadataForCloudAndTenant(ctx context.Context, arg GetCloudAllAccountMetadataForCloudAndTenantParams) ([]CloudAccountMetadatum, error) {
	rows, err := q.db.Query(ctx, getCloudAllAccountMetadataForCloudAndTenant, arg.Cloud, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudAccountMetadatum
	for rows.Next() {
		var i CloudAccountMetadatum
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.AccountID,
			&i.Name,
			&i.Active,
			&i.TagsCurrent,
			&i.TagsDesired,
			&i.TagsDriftDetected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudTenant = `-- name: GetCloudTenant :one
select cloud, tenant_id, name, active, created_at, updated_at from cloud_tenants
    where cloud = $1 and tenant_id = $2
`

type GetCloudTenantParams struct {
	Cloud    string
	TenantID string
}

func (q *Queries) GetCloudTenant(ctx context.Context, arg GetCloudTenantParams) (CloudTenant, error) {
	row := q.db.QueryRow(ctx, getCloudTenant, arg.Cloud, arg.TenantID)
	var i CloudTenant
	err := row.Scan(
		&i.Cloud,
		&i.TenantID,
		&i.Name,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCloudTenants = `-- name: GetCloudTenants :many
select cloud, tenant_id, name, active, created_at, updated_at from cloud_tenants
    order by cloud, tenant_id
`

func (q *Queries) GetCloudTenants(ctx context.Context) ([]CloudTenant, error) {
	rows, err := q.db.Query(ctx, getCloudTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudTenant
	for rows.Next() {
		var i CloudTenant
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.Name,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
