// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createCloudTenant = `-- name: CreateCloudTenant :exec

insert into cloud_tenants (cloud, tenant_id, name)
values ($1, $2, $3)
on conflict (cloud, tenant_id) do update set name       = $3,
                                             updated_at = now()
`

type CreateCloudTenantParams struct {
	Cloud    string
	TenantID string
	Name     string
}

//------------------------------------------------------------------------------------------------------------------
// Cloud Tenants
//------------------------------------------------------------------------------------------------------------------
func (q *Queries) CreateCloudTenant(ctx context.Context, arg CreateCloudTenantParams) error {
	_, err := q.db.Exec(ctx, createCloudTenant, arg.Cloud, arg.TenantID, arg.Name)
	return err
}

const createOrInsertCloudAccount = `-- name: CreateOrInsertCloudAccount :one

insert into cloud_accounts (cloud, tenant_id, account_id, name, tags_current, tags_desired)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (cloud, tenant_id, account_id)
    DO UPDATE SET name         = $4,
                  tags_current = $5,
                  updated_at   = now()
returning cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at
`

type CreateOrInsertCloudAccountParams struct {
	Cloud       string
	TenantID    string
	AccountID   string
	Name        string
	TagsCurrent pgtype.JSONB
	TagsDesired pgtype.JSONB
}

//------------------------------------------------------------------------------------------------------------------
// Cloud Account Metadata
//------------------------------------------------------------------------------------------------------------------
func (q *Queries) CreateOrInsertCloudAccount(ctx context.Context, arg CreateOrInsertCloudAccountParams) (CloudAccount, error) {
	row := q.db.QueryRow(ctx, createOrInsertCloudAccount,
		arg.Cloud,
		arg.TenantID,
		arg.AccountID,
		arg.Name,
		arg.TagsCurrent,
		arg.TagsDesired,
	)
	var i CloudAccount
	err := row.Scan(
		&i.Cloud,
		&i.TenantID,
		&i.AccountID,
		&i.Name,
		&i.Active,
		&i.TagsCurrent,
		&i.TagsDesired,
		&i.TagsDriftDetected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCloudAccount = `-- name: GetCloudAccount :one
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at
from cloud_accounts
where cloud = $1
  and tenant_id = $2
  and account_id = $3
`

type GetCloudAccountParams struct {
	Cloud     string
	TenantID  string
	AccountID string
}

func (q *Queries) GetCloudAccount(ctx context.Context, arg GetCloudAccountParams) (CloudAccount, error) {
	row := q.db.QueryRow(ctx, getCloudAccount, arg.Cloud, arg.TenantID, arg.AccountID)
	var i CloudAccount
	err := row.Scan(
		&i.Cloud,
		&i.TenantID,
		&i.AccountID,
		&i.Name,
		&i.Active,
		&i.TagsCurrent,
		&i.TagsDesired,
		&i.TagsDriftDetected,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCloudAllAccounts = `-- name: GetCloudAllAccounts :many
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at
from cloud_accounts
order by cloud, tenant_id, account_id
`

func (q *Queries) GetCloudAllAccounts(ctx context.Context) ([]CloudAccount, error) {
	rows, err := q.db.Query(ctx, getCloudAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudAccount
	for rows.Next() {
		var i CloudAccount
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.AccountID,
			&i.Name,
			&i.Active,
			&i.TagsCurrent,
			&i.TagsDesired,
			&i.TagsDriftDetected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudAllAccountsForCloud = `-- name: GetCloudAllAccountsForCloud :many
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at
from cloud_accounts
where cloud = $1
order by tenant_id, account_id
`

func (q *Queries) GetCloudAllAccountsForCloud(ctx context.Context, cloud string) ([]CloudAccount, error) {
	rows, err := q.db.Query(ctx, getCloudAllAccountsForCloud, cloud)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudAccount
	for rows.Next() {
		var i CloudAccount
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.AccountID,
			&i.Name,
			&i.Active,
			&i.TagsCurrent,
			&i.TagsDesired,
			&i.TagsDriftDetected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudAllAccountsForCloudAndTenant = `-- name: GetCloudAllAccountsForCloudAndTenant :many
select cloud, tenant_id, account_id, name, active, tags_current, tags_desired, tags_drift_detected, created_at, updated_at
from cloud_accounts
where cloud = $1
  and tenant_id = $2
order by account_id
`

type GetCloudAllAccountsForCloudAndTenantParams struct {
	Cloud    string
	TenantID string
}

func (q *Queries) GetCloudAllAccountsForCloudAndTenant(ctx context.Context, arg GetCloudAllAccountsForCloudAndTenantParams) ([]CloudAccount, error) {
	rows, err := q.db.Query(ctx, getCloudAllAccountsForCloudAndTenant, arg.Cloud, arg.TenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudAccount
	for rows.Next() {
		var i CloudAccount
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.AccountID,
			&i.Name,
			&i.Active,
			&i.TagsCurrent,
			&i.TagsDesired,
			&i.TagsDriftDetected,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCloudTenant = `-- name: GetCloudTenant :one
select cloud, tenant_id, name, active, created_at, updated_at
from cloud_tenants
where cloud = $1
  and tenant_id = $2
`

type GetCloudTenantParams struct {
	Cloud    string
	TenantID string
}

func (q *Queries) GetCloudTenant(ctx context.Context, arg GetCloudTenantParams) (CloudTenant, error) {
	row := q.db.QueryRow(ctx, getCloudTenant, arg.Cloud, arg.TenantID)
	var i CloudTenant
	err := row.Scan(
		&i.Cloud,
		&i.TenantID,
		&i.Name,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCloudTenants = `-- name: GetCloudTenants :many
select cloud, tenant_id, name, active, created_at, updated_at
from cloud_tenants
order by cloud, tenant_id
`

func (q *Queries) GetCloudTenants(ctx context.Context) ([]CloudTenant, error) {
	rows, err := q.db.Query(ctx, getCloudTenants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CloudTenant
	for rows.Next() {
		var i CloudTenant
		if err := rows.Scan(
			&i.Cloud,
			&i.TenantID,
			&i.Name,
			&i.Active,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCloudAccount = `-- name: UpdateCloudAccount :exec
update cloud_accounts
set tags_desired = $4,
    updated_at   = now()
where cloud = $1
  and tenant_id = $2
  and account_id = $3
`

type UpdateCloudAccountParams struct {
	Cloud       string
	TenantID    string
	AccountID   string
	TagsDesired pgtype.JSONB
}

func (q *Queries) UpdateCloudAccount(ctx context.Context, arg UpdateCloudAccountParams) error {
	_, err := q.db.Exec(ctx, updateCloudAccount,
		arg.Cloud,
		arg.TenantID,
		arg.AccountID,
		arg.TagsDesired,
	)
	return err
}

const updateCloudAccountTagsDriftDetected = `-- name: UpdateCloudAccountTagsDriftDetected :exec
update cloud_accounts
set tags_drift_detected = $1,
    updated_at          = now()
where cloud = $2
  and tenant_id = $3
  and account_id = $4
`

type UpdateCloudAccountTagsDriftDetectedParams struct {
	TagsDriftDetected bool
	Cloud             string
	TenantID          string
	AccountID         string
}

func (q *Queries) UpdateCloudAccountTagsDriftDetected(ctx context.Context, arg UpdateCloudAccountTagsDriftDetectedParams) error {
	_, err := q.db.Exec(ctx, updateCloudAccountTagsDriftDetected,
		arg.TagsDriftDetected,
		arg.Cloud,
		arg.TenantID,
		arg.AccountID,
	)
	return err
}
